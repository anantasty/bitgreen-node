name: Ci-test-and-build
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
#   setup:
#     runs-on: ubuntu-latest
#     concurrency:
#       group: ${{ github.head_ref || github.run_id }}
#       cancel-in-progress: true
#     steps:
#       - name: Set-Up
#         run: sudo apt install -y cmake pkg-config libssl-dev git build-essential clang libclang-dev curl

#   build_polkadot:
#     runs-on: ubuntu-latest
#     needs: [setup]
#     concurrency:
#       group: ${{ github.head_ref || github.run_id }}-build-polkadot
#       cancel-in-progress: true
#     steps:
#       - uses: actions/cache@v3
#         with:
#           path: |
#             ~/.cargo
#             target
#             bitgreen-node/target
#             bitgreen-node/bitgreen-node/target

#           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-polkadot
#       - name: Checkout Polkadot
#         uses: actions/checkout@v3
#         with:
#           repository: paritytech/polkadot
#           ref: "v0.9.26"
#           path: "polkadot"
#       - name: build polkadot
#         run: cd polkadot && ./scripts/init.sh && cargo build --release

#       - name: Upload Polkadot Binary
#         uses: actions/upload-artifact@v3
#         with:
#           name: polkadot-binary
#           path: polkadot/target/release/polkadot
#       - name: copy polkadot via scp
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.SSH_IP }}
#           username: root
#           key: ${{ secrets.SSH_PRIV }}
#           source: "polkadot/target/release/polkadot"
#           target: "polkadot"
#   check:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     needs: [setup]
#     # cancel concurrent builds on the same branch
#     concurrency:
#       group: ${{ github.head_ref || github.run_id }}-check
#       cancel-in-progress: true
#     steps:
#       - uses: actions/cache@v3
#         with:
#           path: |
#             ~/.cargo
#             target
#             bitgreen-node/target
#             bitgreen-node/bitgreen-node/target
#           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-check
#       - name: Install toolchain
#         uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: nightly-2022-05-15
#           components: rustfmt
#           target: wasm32-unknown-unknown
#           default: true
#       - name: Install toolchain x86
#         uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: nightly-2022-05-15
#           components: rustfmt
#           target: x86_64-unknown-linux-gnu
#           default: true
#       - name: Checkout code
#         uses: actions/checkout@v3
#       - name: Cargo format
#         run: pwd && cargo fmt --all -- --check

#       - name: Cargo check
#         run: SKIP_WASM_BUILD=1 cargo check --release

#       - name: Run clippy
#         run: |
#           rustup component add clippy --toolchain nightly-2022-05-15-x86_64-unknown-linux-gnu
#           cargo clippy --all-targets --workspace -- --deny warnings

#   test:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     concurrency:
#       group: ${{ github.head_ref || github.run_id }}-test
#       cancel-in-progress: true
#     needs: [setup]
#     # cancel concurrent builds on the same branch
#     steps:
#       - uses: actions/cache@v3
#         with:
#           path: |
#             ~/.cargo
#             target
#             bitgreen-node/target
#             bitgreen-node/bitgreen-node/target

#           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-test
#       - name: Rust Cache
#         uses: Swatinem/rust-cache@v2.0.0
#         with:
#           cache-on-failure: true
#           shared-key: test
#       - name: Install toolchain
#         uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: nightly-2022-05-15
#           components: rustfmt
#           target: wasm32-unknown-unknown
#           default: true
#       - name: Install toolchain x86
#         uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: nightly-2022-05-15
#           components: rustfmt
#           target: x86_64-unknown-linux-gnu
#           default: true
#       - name: Checkout code
#         uses: actions/checkout@v3
#       - name: Cargo format
#         run: pwd && cargo fmt --all -- --check

#       - name: Cargo test
#         run: cargo test
#   benchmark:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     concurrency:
#       group: ${{ github.head_ref || github.run_id }}-test
#       cancel-in-progress: true
#     needs: [setup, check]
#     steps:
#       - uses: actions/cache@v3
#         with:
#           path: |
#             ~/.cargo
#             target
#             bitgreen-node/target
#             bitgreen-node/bitgreen-node/target
#           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-benchmark

#       - name: Install toolchain
#         uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: nightly-2022-05-15
#           components: rustfmt
#           target: wasm32-unknown-unknown
#           default: true
#       - name: Install toolchain x86
#         uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: nightly-2022-05-15
#           components: rustfmt
#           target: x86_64-unknown-linux-gnu
#           default: true
#       - name: Checkout code
#         uses: actions/checkout@v3
#       - name: Check check benchmarking
#         run: cargo check --features=runtime-benchmarks --release

#   build:
#     runs-on: ubuntu-latest
#     concurrency:
#       group: ${{ github.head_ref || github.run_id-build }}-build
#       cancel-in-progress: true
#     needs: [setup]
#     steps:
#       - uses: actions/cache@v3
#         with:
#           path: |
#             ~/.cargo
#             target
#             bitgreen-node/target
#             bitgreen-node/bitgreen-node/target
#           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-build

#       - name: Install toolchain
#         uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: nightly-2022-05-15
#           components: rustfmt
#           target: wasm32-unknown-unknown
#           default: true
#       - name: Checkout code
#         uses: actions/checkout@v3
#       # Run cargo build release on github runner and cache it for next run to speed up the builds
#       - name: Cargo build release
#         run: |
#           cargo build --release
#       - name: copy bitg-parachain via ssh
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.SSH_IP }}
#           username: root
#           key: ${{ secrets.SSH_PRIV }}
#           source: "target/release/bitg-parachain"
#           target: "bitg-parachain"
#   prepare_hosts:
#     runs-on: ubuntu-latest
#     concurrency:
#       group: ${{ github.head_ref || github.run_id }}-deploy
#       cancel-in-progress: true
#     needs: [setup,test]
#     steps:
#       - name: Setup Supervisor
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.ALL_HOSTS }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_PRIV }}
#           script: apt update && apt install -y supervisor
#   prepare_relay_nodes:
#     runs-on: ubuntu-latest
#     concurrency:
#       group: ${{ github.head_ref || github.run_id }}-deploy
#       cancel-in-progress: true
#     needs: [prepare_hosts,build_polkadot, build]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#       - name: relay alice supervisor conf
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.HOST_ALICE }}
#           username: root
#           key: ${{ secrets.SSH_PRIV }}
#           source: "scripts/supervisor/alice.conf"
#           target: "supervisor"
#       - name: relay bob supervisor conf
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.HOST_BOB }}
#           username: root
#           key: ${{ secrets.SSH_PRIV }}
#           source: "scripts/supervisor/bob.conf"
#           target: "supervisor"
#       - name: alice supervisor file copy
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST_ALICE }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_PRIV }}
#           script: cp supervisor/scripts/supervisor/alice.conf /etc/supervisor/conf.d/alice.conf
#       - name: bob supervisor file copy
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST_BOB }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_PRIV }}
#           script: cp supervisor/scripts/supervisor/bob.conf /etc/supervisor/conf.d/bob.conf

#   prepare_parachain_node:
#     runs-on: ubuntu-latest
#     concurrency:
#       group: ${{ github.head_ref || github.run_id }}-deploy
#       cancel-in-progress: true
#     needs: [prepare_hosts,build_polkadot, build]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#       - name: relay alice supervisor conf
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.PARACHAIN_HOST }}
#           username: root
#           key: ${{ secrets.SSH_PRIV }}
#           source: "scripts/supervisor/parachain.conf"
#           target: "supervisor"
#       - name: parachain supervisor file
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.PARACHAIN_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_PRIV }}
#           script: cp supervisor/scripts/supervisor/parachain.conf /etc/supervisor/conf.d/parachain.conf


  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.head_ref || github.run_id }}-deploy
      cancel-in-progress: true
    # needs: [check, build_polkadot, build, test, benchmark, prepare_hosts,prepare_parachain_node]
    steps:
      - name: ssh and generate config
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PARACHAIN_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIV }}
          script:  pwd && ls -alh && ~/polkadot/polkadot/target/release/polkadot  build-spec --chain rococo-local --disable-default-bootnode --raw > rococo-local-cfde.json

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIV}}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.PARACHAIN_HOST }} >> ~/.ssh/known_hosts
      - name: Deploy with rsync
        run: rsync -avz ${{ secrets.SSH_USER }}@${{ secrets.PARACHAIN_HOST }}:~/rococo-local-cfde.json ~/rococo-local-cfde.json && ls ~/ && pwd
      - name: List copied files
        run: pwd && ls -alh
      - name: copy config
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ALL_HOSTS }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIV }}
          source: "rococo-local-cfde.conf"
          target: "conf"

      - name: ssh and start
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ALL_HOSTS }}
          username: root
          key: ${{ secrets.SSH_PRIV }}
          script: cp ~/conf/rococo-local-cfde.conf ~/ && supervisorctl reload
